// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filmogophery/internal/pkg/gen/model"
)

func newGenres(db *gorm.DB, opts ...gen.DOOption) genres {
	_genres := genres{}

	_genres.genresDo.UseDB(db, opts...)
	_genres.genresDo.UseModel(&model.Genres{})

	tableName := _genres.genresDo.TableName()
	_genres.ALL = field.NewAsterisk(tableName)
	_genres.ID = field.NewInt32(tableName, "id")
	_genres.Code = field.NewString(tableName, "code")
	_genres.Name = field.NewString(tableName, "name")
	_genres.Movies = genresManyToManyMovies{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Movies", "model.Movies"),
	}

	_genres.fillFieldMap()

	return _genres
}

type genres struct {
	genresDo

	ALL    field.Asterisk
	ID     field.Int32
	Code   field.String
	Name   field.String
	Movies genresManyToManyMovies

	fieldMap map[string]field.Expr
}

func (g genres) Table(newTableName string) *genres {
	g.genresDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g genres) As(alias string) *genres {
	g.genresDo.DO = *(g.genresDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *genres) updateTableName(table string) *genres {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Code = field.NewString(table, "code")
	g.Name = field.NewString(table, "name")

	g.fillFieldMap()

	return g
}

func (g *genres) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *genres) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["code"] = g.Code
	g.fieldMap["name"] = g.Name

}

func (g genres) clone(db *gorm.DB) genres {
	g.genresDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g genres) replaceDB(db *gorm.DB) genres {
	g.genresDo.ReplaceDB(db)
	return g
}

type genresManyToManyMovies struct {
	db *gorm.DB

	field.RelationField
}

func (a genresManyToManyMovies) Where(conds ...field.Expr) *genresManyToManyMovies {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a genresManyToManyMovies) WithContext(ctx context.Context) *genresManyToManyMovies {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a genresManyToManyMovies) Session(session *gorm.Session) *genresManyToManyMovies {
	a.db = a.db.Session(session)
	return &a
}

func (a genresManyToManyMovies) Model(m *model.Genres) *genresManyToManyMoviesTx {
	return &genresManyToManyMoviesTx{a.db.Model(m).Association(a.Name())}
}

type genresManyToManyMoviesTx struct{ tx *gorm.Association }

func (a genresManyToManyMoviesTx) Find() (result []*model.Movies, err error) {
	return result, a.tx.Find(&result)
}

func (a genresManyToManyMoviesTx) Append(values ...*model.Movies) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a genresManyToManyMoviesTx) Replace(values ...*model.Movies) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a genresManyToManyMoviesTx) Delete(values ...*model.Movies) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a genresManyToManyMoviesTx) Clear() error {
	return a.tx.Clear()
}

func (a genresManyToManyMoviesTx) Count() int64 {
	return a.tx.Count()
}

type genresDo struct{ gen.DO }

func (g genresDo) Debug() *genresDo {
	return g.withDO(g.DO.Debug())
}

func (g genresDo) WithContext(ctx context.Context) *genresDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g genresDo) ReadDB() *genresDo {
	return g.Clauses(dbresolver.Read)
}

func (g genresDo) WriteDB() *genresDo {
	return g.Clauses(dbresolver.Write)
}

func (g genresDo) Session(config *gorm.Session) *genresDo {
	return g.withDO(g.DO.Session(config))
}

func (g genresDo) Clauses(conds ...clause.Expression) *genresDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g genresDo) Returning(value interface{}, columns ...string) *genresDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g genresDo) Not(conds ...gen.Condition) *genresDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g genresDo) Or(conds ...gen.Condition) *genresDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g genresDo) Select(conds ...field.Expr) *genresDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g genresDo) Where(conds ...gen.Condition) *genresDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g genresDo) Order(conds ...field.Expr) *genresDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g genresDo) Distinct(cols ...field.Expr) *genresDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g genresDo) Omit(cols ...field.Expr) *genresDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g genresDo) Join(table schema.Tabler, on ...field.Expr) *genresDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g genresDo) LeftJoin(table schema.Tabler, on ...field.Expr) *genresDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g genresDo) RightJoin(table schema.Tabler, on ...field.Expr) *genresDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g genresDo) Group(cols ...field.Expr) *genresDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g genresDo) Having(conds ...gen.Condition) *genresDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g genresDo) Limit(limit int) *genresDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g genresDo) Offset(offset int) *genresDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g genresDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *genresDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g genresDo) Unscoped() *genresDo {
	return g.withDO(g.DO.Unscoped())
}

func (g genresDo) Create(values ...*model.Genres) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g genresDo) CreateInBatches(values []*model.Genres, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g genresDo) Save(values ...*model.Genres) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g genresDo) First() (*model.Genres, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genres), nil
	}
}

func (g genresDo) Take() (*model.Genres, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genres), nil
	}
}

func (g genresDo) Last() (*model.Genres, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genres), nil
	}
}

func (g genresDo) Find() ([]*model.Genres, error) {
	result, err := g.DO.Find()
	return result.([]*model.Genres), err
}

func (g genresDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Genres, err error) {
	buf := make([]*model.Genres, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g genresDo) FindInBatches(result *[]*model.Genres, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g genresDo) Attrs(attrs ...field.AssignExpr) *genresDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g genresDo) Assign(attrs ...field.AssignExpr) *genresDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g genresDo) Joins(fields ...field.RelationField) *genresDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g genresDo) Preload(fields ...field.RelationField) *genresDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g genresDo) FirstOrInit() (*model.Genres, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genres), nil
	}
}

func (g genresDo) FirstOrCreate() (*model.Genres, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Genres), nil
	}
}

func (g genresDo) FindByPage(offset int, limit int) (result []*model.Genres, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g genresDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g genresDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g genresDo) Delete(models ...*model.Genres) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *genresDo) withDO(do gen.Dao) *genresDo {
	g.DO = *do.(*gen.DO)
	return g
}
