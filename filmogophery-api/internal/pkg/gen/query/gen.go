// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Genres:       newGenres(db, opts...),
		MovieGenres:  newMovieGenres(db, opts...),
		Movies:       newMovies(db, opts...),
		Platforms:    newPlatforms(db, opts...),
		Reviews:      newReviews(db, opts...),
		Series:       newSeries(db, opts...),
		Users:        newUsers(db, opts...),
		WatchHistory: newWatchHistory(db, opts...),
		Watchlist:    newWatchlist(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Genres       genres
	MovieGenres  movieGenres
	Movies       movies
	Platforms    platforms
	Reviews      reviews
	Series       series
	Users        users
	WatchHistory watchHistory
	Watchlist    watchlist
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Genres:       q.Genres.clone(db),
		MovieGenres:  q.MovieGenres.clone(db),
		Movies:       q.Movies.clone(db),
		Platforms:    q.Platforms.clone(db),
		Reviews:      q.Reviews.clone(db),
		Series:       q.Series.clone(db),
		Users:        q.Users.clone(db),
		WatchHistory: q.WatchHistory.clone(db),
		Watchlist:    q.Watchlist.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Genres:       q.Genres.replaceDB(db),
		MovieGenres:  q.MovieGenres.replaceDB(db),
		Movies:       q.Movies.replaceDB(db),
		Platforms:    q.Platforms.replaceDB(db),
		Reviews:      q.Reviews.replaceDB(db),
		Series:       q.Series.replaceDB(db),
		Users:        q.Users.replaceDB(db),
		WatchHistory: q.WatchHistory.replaceDB(db),
		Watchlist:    q.Watchlist.replaceDB(db),
	}
}

type queryCtx struct {
	Genres       *genresDo
	MovieGenres  *movieGenresDo
	Movies       *moviesDo
	Platforms    *platformsDo
	Reviews      *reviewsDo
	Series       *seriesDo
	Users        *usersDo
	WatchHistory *watchHistoryDo
	Watchlist    *watchlistDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Genres:       q.Genres.WithContext(ctx),
		MovieGenres:  q.MovieGenres.WithContext(ctx),
		Movies:       q.Movies.WithContext(ctx),
		Platforms:    q.Platforms.WithContext(ctx),
		Reviews:      q.Reviews.WithContext(ctx),
		Series:       q.Series.WithContext(ctx),
		Users:        q.Users.WithContext(ctx),
		WatchHistory: q.WatchHistory.WithContext(ctx),
		Watchlist:    q.Watchlist.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
