// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filmogophery/internal/pkg/gen/model"
)

func newPlatforms(db *gorm.DB, opts ...gen.DOOption) platforms {
	_platforms := platforms{}

	_platforms.platformsDo.UseDB(db, opts...)
	_platforms.platformsDo.UseModel(&model.Platforms{})

	tableName := _platforms.platformsDo.TableName()
	_platforms.ALL = field.NewAsterisk(tableName)
	_platforms.ID = field.NewInt32(tableName, "id")
	_platforms.Code = field.NewString(tableName, "code")
	_platforms.Name = field.NewString(tableName, "name")

	_platforms.fillFieldMap()

	return _platforms
}

type platforms struct {
	platformsDo

	ALL  field.Asterisk
	ID   field.Int32
	Code field.String
	Name field.String

	fieldMap map[string]field.Expr
}

func (p platforms) Table(newTableName string) *platforms {
	p.platformsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p platforms) As(alias string) *platforms {
	p.platformsDo.DO = *(p.platformsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *platforms) updateTableName(table string) *platforms {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Code = field.NewString(table, "code")
	p.Name = field.NewString(table, "name")

	p.fillFieldMap()

	return p
}

func (p *platforms) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *platforms) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["code"] = p.Code
	p.fieldMap["name"] = p.Name
}

func (p platforms) clone(db *gorm.DB) platforms {
	p.platformsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p platforms) replaceDB(db *gorm.DB) platforms {
	p.platformsDo.ReplaceDB(db)
	return p
}

type platformsDo struct{ gen.DO }

func (p platformsDo) Debug() *platformsDo {
	return p.withDO(p.DO.Debug())
}

func (p platformsDo) WithContext(ctx context.Context) *platformsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p platformsDo) ReadDB() *platformsDo {
	return p.Clauses(dbresolver.Read)
}

func (p platformsDo) WriteDB() *platformsDo {
	return p.Clauses(dbresolver.Write)
}

func (p platformsDo) Session(config *gorm.Session) *platformsDo {
	return p.withDO(p.DO.Session(config))
}

func (p platformsDo) Clauses(conds ...clause.Expression) *platformsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p platformsDo) Returning(value interface{}, columns ...string) *platformsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p platformsDo) Not(conds ...gen.Condition) *platformsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p platformsDo) Or(conds ...gen.Condition) *platformsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p platformsDo) Select(conds ...field.Expr) *platformsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p platformsDo) Where(conds ...gen.Condition) *platformsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p platformsDo) Order(conds ...field.Expr) *platformsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p platformsDo) Distinct(cols ...field.Expr) *platformsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p platformsDo) Omit(cols ...field.Expr) *platformsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p platformsDo) Join(table schema.Tabler, on ...field.Expr) *platformsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p platformsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *platformsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p platformsDo) RightJoin(table schema.Tabler, on ...field.Expr) *platformsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p platformsDo) Group(cols ...field.Expr) *platformsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p platformsDo) Having(conds ...gen.Condition) *platformsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p platformsDo) Limit(limit int) *platformsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p platformsDo) Offset(offset int) *platformsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p platformsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *platformsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p platformsDo) Unscoped() *platformsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p platformsDo) Create(values ...*model.Platforms) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p platformsDo) CreateInBatches(values []*model.Platforms, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p platformsDo) Save(values ...*model.Platforms) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p platformsDo) First() (*model.Platforms, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platforms), nil
	}
}

func (p platformsDo) Take() (*model.Platforms, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platforms), nil
	}
}

func (p platformsDo) Last() (*model.Platforms, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platforms), nil
	}
}

func (p platformsDo) Find() ([]*model.Platforms, error) {
	result, err := p.DO.Find()
	return result.([]*model.Platforms), err
}

func (p platformsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Platforms, err error) {
	buf := make([]*model.Platforms, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p platformsDo) FindInBatches(result *[]*model.Platforms, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p platformsDo) Attrs(attrs ...field.AssignExpr) *platformsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p platformsDo) Assign(attrs ...field.AssignExpr) *platformsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p platformsDo) Joins(fields ...field.RelationField) *platformsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p platformsDo) Preload(fields ...field.RelationField) *platformsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p platformsDo) FirstOrInit() (*model.Platforms, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platforms), nil
	}
}

func (p platformsDo) FirstOrCreate() (*model.Platforms, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platforms), nil
	}
}

func (p platformsDo) FindByPage(offset int, limit int) (result []*model.Platforms, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p platformsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p platformsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p platformsDo) Delete(models ...*model.Platforms) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *platformsDo) withDO(do gen.Dao) *platformsDo {
	p.DO = *do.(*gen.DO)
	return p
}
