// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filmogophery/internal/pkg/gen/model"
)

func newWatchHistory(db *gorm.DB, opts ...gen.DOOption) watchHistory {
	_watchHistory := watchHistory{}

	_watchHistory.watchHistoryDo.UseDB(db, opts...)
	_watchHistory.watchHistoryDo.UseModel(&model.WatchHistory{})

	tableName := _watchHistory.watchHistoryDo.TableName()
	_watchHistory.ALL = field.NewAsterisk(tableName)
	_watchHistory.ID = field.NewInt32(tableName, "id")
	_watchHistory.ReviewID = field.NewInt32(tableName, "review_id")
	_watchHistory.PlatformID = field.NewInt32(tableName, "platform_id")
	_watchHistory.WatchedDate = field.NewTime(tableName, "watched_date")

	_watchHistory.fillFieldMap()

	return _watchHistory
}

type watchHistory struct {
	watchHistoryDo

	ALL         field.Asterisk
	ID          field.Int32
	ReviewID    field.Int32
	PlatformID  field.Int32
	WatchedDate field.Time

	fieldMap map[string]field.Expr
}

func (w watchHistory) Table(newTableName string) *watchHistory {
	w.watchHistoryDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w watchHistory) As(alias string) *watchHistory {
	w.watchHistoryDo.DO = *(w.watchHistoryDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *watchHistory) updateTableName(table string) *watchHistory {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.ReviewID = field.NewInt32(table, "review_id")
	w.PlatformID = field.NewInt32(table, "platform_id")
	w.WatchedDate = field.NewTime(table, "watched_date")

	w.fillFieldMap()

	return w
}

func (w *watchHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *watchHistory) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["id"] = w.ID
	w.fieldMap["review_id"] = w.ReviewID
	w.fieldMap["platform_id"] = w.PlatformID
	w.fieldMap["watched_date"] = w.WatchedDate
}

func (w watchHistory) clone(db *gorm.DB) watchHistory {
	w.watchHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w watchHistory) replaceDB(db *gorm.DB) watchHistory {
	w.watchHistoryDo.ReplaceDB(db)
	return w
}

type watchHistoryDo struct{ gen.DO }

func (w watchHistoryDo) Debug() *watchHistoryDo {
	return w.withDO(w.DO.Debug())
}

func (w watchHistoryDo) WithContext(ctx context.Context) *watchHistoryDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w watchHistoryDo) ReadDB() *watchHistoryDo {
	return w.Clauses(dbresolver.Read)
}

func (w watchHistoryDo) WriteDB() *watchHistoryDo {
	return w.Clauses(dbresolver.Write)
}

func (w watchHistoryDo) Session(config *gorm.Session) *watchHistoryDo {
	return w.withDO(w.DO.Session(config))
}

func (w watchHistoryDo) Clauses(conds ...clause.Expression) *watchHistoryDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w watchHistoryDo) Returning(value interface{}, columns ...string) *watchHistoryDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w watchHistoryDo) Not(conds ...gen.Condition) *watchHistoryDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w watchHistoryDo) Or(conds ...gen.Condition) *watchHistoryDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w watchHistoryDo) Select(conds ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w watchHistoryDo) Where(conds ...gen.Condition) *watchHistoryDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w watchHistoryDo) Order(conds ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w watchHistoryDo) Distinct(cols ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w watchHistoryDo) Omit(cols ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w watchHistoryDo) Join(table schema.Tabler, on ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w watchHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w watchHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w watchHistoryDo) Group(cols ...field.Expr) *watchHistoryDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w watchHistoryDo) Having(conds ...gen.Condition) *watchHistoryDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w watchHistoryDo) Limit(limit int) *watchHistoryDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w watchHistoryDo) Offset(offset int) *watchHistoryDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w watchHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *watchHistoryDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w watchHistoryDo) Unscoped() *watchHistoryDo {
	return w.withDO(w.DO.Unscoped())
}

func (w watchHistoryDo) Create(values ...*model.WatchHistory) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w watchHistoryDo) CreateInBatches(values []*model.WatchHistory, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w watchHistoryDo) Save(values ...*model.WatchHistory) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w watchHistoryDo) First() (*model.WatchHistory, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WatchHistory), nil
	}
}

func (w watchHistoryDo) Take() (*model.WatchHistory, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WatchHistory), nil
	}
}

func (w watchHistoryDo) Last() (*model.WatchHistory, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WatchHistory), nil
	}
}

func (w watchHistoryDo) Find() ([]*model.WatchHistory, error) {
	result, err := w.DO.Find()
	return result.([]*model.WatchHistory), err
}

func (w watchHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WatchHistory, err error) {
	buf := make([]*model.WatchHistory, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w watchHistoryDo) FindInBatches(result *[]*model.WatchHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w watchHistoryDo) Attrs(attrs ...field.AssignExpr) *watchHistoryDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w watchHistoryDo) Assign(attrs ...field.AssignExpr) *watchHistoryDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w watchHistoryDo) Joins(fields ...field.RelationField) *watchHistoryDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w watchHistoryDo) Preload(fields ...field.RelationField) *watchHistoryDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w watchHistoryDo) FirstOrInit() (*model.WatchHistory, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WatchHistory), nil
	}
}

func (w watchHistoryDo) FirstOrCreate() (*model.WatchHistory, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WatchHistory), nil
	}
}

func (w watchHistoryDo) FindByPage(offset int, limit int) (result []*model.WatchHistory, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w watchHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w watchHistoryDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w watchHistoryDo) Delete(models ...*model.WatchHistory) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *watchHistoryDo) withDO(do gen.Dao) *watchHistoryDo {
	w.DO = *do.(*gen.DO)
	return w
}
