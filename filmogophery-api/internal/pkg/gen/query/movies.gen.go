// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filmogophery/internal/pkg/gen/model"
)

func newMovies(db *gorm.DB, opts ...gen.DOOption) movies {
	_movies := movies{}

	_movies.moviesDo.UseDB(db, opts...)
	_movies.moviesDo.UseModel(&model.Movies{})

	tableName := _movies.moviesDo.TableName()
	_movies.ALL = field.NewAsterisk(tableName)
	_movies.ID = field.NewInt32(tableName, "id")
	_movies.Title = field.NewString(tableName, "title")
	_movies.Overview = field.NewString(tableName, "overview")
	_movies.ReleaseDate = field.NewTime(tableName, "release_date")
	_movies.RuntimeMinutes = field.NewInt32(tableName, "runtime_minutes")
	_movies.PosterURL = field.NewString(tableName, "poster_url")
	_movies.SeriesID = field.NewInt32(tableName, "series_id")
	_movies.TmdbID = field.NewInt32(tableName, "tmdb_id")
	_movies.CreatedAt = field.NewTime(tableName, "created_at")
	_movies.Genres = moviesManyToManyGenres{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Genres", "model.Genres"),
		Movies: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Genres.Movies", "model.Movies"),
		},
	}

	_movies.Series = moviesHasOneSeries{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Series", "model.Series"),
	}

	_movies.fillFieldMap()

	return _movies
}

type movies struct {
	moviesDo

	ALL            field.Asterisk
	ID             field.Int32
	Title          field.String
	Overview       field.String
	ReleaseDate    field.Time
	RuntimeMinutes field.Int32
	PosterURL      field.String
	SeriesID       field.Int32
	TmdbID         field.Int32
	CreatedAt      field.Time
	Genres         moviesManyToManyGenres

	Series moviesHasOneSeries

	fieldMap map[string]field.Expr
}

func (m movies) Table(newTableName string) *movies {
	m.moviesDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m movies) As(alias string) *movies {
	m.moviesDo.DO = *(m.moviesDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *movies) updateTableName(table string) *movies {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Title = field.NewString(table, "title")
	m.Overview = field.NewString(table, "overview")
	m.ReleaseDate = field.NewTime(table, "release_date")
	m.RuntimeMinutes = field.NewInt32(table, "runtime_minutes")
	m.PosterURL = field.NewString(table, "poster_url")
	m.SeriesID = field.NewInt32(table, "series_id")
	m.TmdbID = field.NewInt32(table, "tmdb_id")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *movies) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *movies) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 11)
	m.fieldMap["id"] = m.ID
	m.fieldMap["title"] = m.Title
	m.fieldMap["overview"] = m.Overview
	m.fieldMap["release_date"] = m.ReleaseDate
	m.fieldMap["runtime_minutes"] = m.RuntimeMinutes
	m.fieldMap["poster_url"] = m.PosterURL
	m.fieldMap["series_id"] = m.SeriesID
	m.fieldMap["tmdb_id"] = m.TmdbID
	m.fieldMap["created_at"] = m.CreatedAt

}

func (m movies) clone(db *gorm.DB) movies {
	m.moviesDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m movies) replaceDB(db *gorm.DB) movies {
	m.moviesDo.ReplaceDB(db)
	return m
}

type moviesManyToManyGenres struct {
	db *gorm.DB

	field.RelationField

	Movies struct {
		field.RelationField
	}
}

func (a moviesManyToManyGenres) Where(conds ...field.Expr) *moviesManyToManyGenres {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a moviesManyToManyGenres) WithContext(ctx context.Context) *moviesManyToManyGenres {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a moviesManyToManyGenres) Session(session *gorm.Session) *moviesManyToManyGenres {
	a.db = a.db.Session(session)
	return &a
}

func (a moviesManyToManyGenres) Model(m *model.Movies) *moviesManyToManyGenresTx {
	return &moviesManyToManyGenresTx{a.db.Model(m).Association(a.Name())}
}

type moviesManyToManyGenresTx struct{ tx *gorm.Association }

func (a moviesManyToManyGenresTx) Find() (result []*model.Genres, err error) {
	return result, a.tx.Find(&result)
}

func (a moviesManyToManyGenresTx) Append(values ...*model.Genres) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a moviesManyToManyGenresTx) Replace(values ...*model.Genres) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a moviesManyToManyGenresTx) Delete(values ...*model.Genres) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a moviesManyToManyGenresTx) Clear() error {
	return a.tx.Clear()
}

func (a moviesManyToManyGenresTx) Count() int64 {
	return a.tx.Count()
}

type moviesHasOneSeries struct {
	db *gorm.DB

	field.RelationField
}

func (a moviesHasOneSeries) Where(conds ...field.Expr) *moviesHasOneSeries {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a moviesHasOneSeries) WithContext(ctx context.Context) *moviesHasOneSeries {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a moviesHasOneSeries) Session(session *gorm.Session) *moviesHasOneSeries {
	a.db = a.db.Session(session)
	return &a
}

func (a moviesHasOneSeries) Model(m *model.Movies) *moviesHasOneSeriesTx {
	return &moviesHasOneSeriesTx{a.db.Model(m).Association(a.Name())}
}

type moviesHasOneSeriesTx struct{ tx *gorm.Association }

func (a moviesHasOneSeriesTx) Find() (result *model.Series, err error) {
	return result, a.tx.Find(&result)
}

func (a moviesHasOneSeriesTx) Append(values ...*model.Series) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a moviesHasOneSeriesTx) Replace(values ...*model.Series) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a moviesHasOneSeriesTx) Delete(values ...*model.Series) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a moviesHasOneSeriesTx) Clear() error {
	return a.tx.Clear()
}

func (a moviesHasOneSeriesTx) Count() int64 {
	return a.tx.Count()
}

type moviesDo struct{ gen.DO }

func (m moviesDo) Debug() *moviesDo {
	return m.withDO(m.DO.Debug())
}

func (m moviesDo) WithContext(ctx context.Context) *moviesDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m moviesDo) ReadDB() *moviesDo {
	return m.Clauses(dbresolver.Read)
}

func (m moviesDo) WriteDB() *moviesDo {
	return m.Clauses(dbresolver.Write)
}

func (m moviesDo) Session(config *gorm.Session) *moviesDo {
	return m.withDO(m.DO.Session(config))
}

func (m moviesDo) Clauses(conds ...clause.Expression) *moviesDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m moviesDo) Returning(value interface{}, columns ...string) *moviesDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m moviesDo) Not(conds ...gen.Condition) *moviesDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m moviesDo) Or(conds ...gen.Condition) *moviesDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m moviesDo) Select(conds ...field.Expr) *moviesDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m moviesDo) Where(conds ...gen.Condition) *moviesDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m moviesDo) Order(conds ...field.Expr) *moviesDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m moviesDo) Distinct(cols ...field.Expr) *moviesDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m moviesDo) Omit(cols ...field.Expr) *moviesDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m moviesDo) Join(table schema.Tabler, on ...field.Expr) *moviesDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m moviesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *moviesDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m moviesDo) RightJoin(table schema.Tabler, on ...field.Expr) *moviesDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m moviesDo) Group(cols ...field.Expr) *moviesDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m moviesDo) Having(conds ...gen.Condition) *moviesDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m moviesDo) Limit(limit int) *moviesDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m moviesDo) Offset(offset int) *moviesDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m moviesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *moviesDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m moviesDo) Unscoped() *moviesDo {
	return m.withDO(m.DO.Unscoped())
}

func (m moviesDo) Create(values ...*model.Movies) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m moviesDo) CreateInBatches(values []*model.Movies, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m moviesDo) Save(values ...*model.Movies) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m moviesDo) First() (*model.Movies, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movies), nil
	}
}

func (m moviesDo) Take() (*model.Movies, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movies), nil
	}
}

func (m moviesDo) Last() (*model.Movies, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movies), nil
	}
}

func (m moviesDo) Find() ([]*model.Movies, error) {
	result, err := m.DO.Find()
	return result.([]*model.Movies), err
}

func (m moviesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Movies, err error) {
	buf := make([]*model.Movies, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m moviesDo) FindInBatches(result *[]*model.Movies, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m moviesDo) Attrs(attrs ...field.AssignExpr) *moviesDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m moviesDo) Assign(attrs ...field.AssignExpr) *moviesDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m moviesDo) Joins(fields ...field.RelationField) *moviesDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m moviesDo) Preload(fields ...field.RelationField) *moviesDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m moviesDo) FirstOrInit() (*model.Movies, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movies), nil
	}
}

func (m moviesDo) FirstOrCreate() (*model.Movies, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Movies), nil
	}
}

func (m moviesDo) FindByPage(offset int, limit int) (result []*model.Movies, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m moviesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m moviesDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m moviesDo) Delete(models ...*model.Movies) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *moviesDo) withDO(do gen.Dao) *moviesDo {
	m.DO = *do.(*gen.DO)
	return m
}
