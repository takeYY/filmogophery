// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filmogophery/internal/pkg/gen/model"
)

func newSeries(db *gorm.DB, opts ...gen.DOOption) series {
	_series := series{}

	_series.seriesDo.UseDB(db, opts...)
	_series.seriesDo.UseModel(&model.Series{})

	tableName := _series.seriesDo.TableName()
	_series.ALL = field.NewAsterisk(tableName)
	_series.ID = field.NewInt32(tableName, "id")
	_series.Name = field.NewString(tableName, "name")
	_series.PosterURL = field.NewString(tableName, "poster_url")
	_series.CreatedAt = field.NewTime(tableName, "created_at")

	_series.fillFieldMap()

	return _series
}

type series struct {
	seriesDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	PosterURL field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s series) Table(newTableName string) *series {
	s.seriesDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s series) As(alias string) *series {
	s.seriesDo.DO = *(s.seriesDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *series) updateTableName(table string) *series {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.PosterURL = field.NewString(table, "poster_url")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *series) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *series) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["poster_url"] = s.PosterURL
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s series) clone(db *gorm.DB) series {
	s.seriesDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s series) replaceDB(db *gorm.DB) series {
	s.seriesDo.ReplaceDB(db)
	return s
}

type seriesDo struct{ gen.DO }

func (s seriesDo) Debug() *seriesDo {
	return s.withDO(s.DO.Debug())
}

func (s seriesDo) WithContext(ctx context.Context) *seriesDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seriesDo) ReadDB() *seriesDo {
	return s.Clauses(dbresolver.Read)
}

func (s seriesDo) WriteDB() *seriesDo {
	return s.Clauses(dbresolver.Write)
}

func (s seriesDo) Session(config *gorm.Session) *seriesDo {
	return s.withDO(s.DO.Session(config))
}

func (s seriesDo) Clauses(conds ...clause.Expression) *seriesDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seriesDo) Returning(value interface{}, columns ...string) *seriesDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seriesDo) Not(conds ...gen.Condition) *seriesDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seriesDo) Or(conds ...gen.Condition) *seriesDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seriesDo) Select(conds ...field.Expr) *seriesDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seriesDo) Where(conds ...gen.Condition) *seriesDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seriesDo) Order(conds ...field.Expr) *seriesDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seriesDo) Distinct(cols ...field.Expr) *seriesDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seriesDo) Omit(cols ...field.Expr) *seriesDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seriesDo) Join(table schema.Tabler, on ...field.Expr) *seriesDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *seriesDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seriesDo) RightJoin(table schema.Tabler, on ...field.Expr) *seriesDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seriesDo) Group(cols ...field.Expr) *seriesDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seriesDo) Having(conds ...gen.Condition) *seriesDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seriesDo) Limit(limit int) *seriesDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seriesDo) Offset(offset int) *seriesDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *seriesDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seriesDo) Unscoped() *seriesDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seriesDo) Create(values ...*model.Series) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seriesDo) CreateInBatches(values []*model.Series, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seriesDo) Save(values ...*model.Series) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seriesDo) First() (*model.Series, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) Take() (*model.Series, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) Last() (*model.Series, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) Find() ([]*model.Series, error) {
	result, err := s.DO.Find()
	return result.([]*model.Series), err
}

func (s seriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Series, err error) {
	buf := make([]*model.Series, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seriesDo) FindInBatches(result *[]*model.Series, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seriesDo) Attrs(attrs ...field.AssignExpr) *seriesDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seriesDo) Assign(attrs ...field.AssignExpr) *seriesDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seriesDo) Joins(fields ...field.RelationField) *seriesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seriesDo) Preload(fields ...field.RelationField) *seriesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seriesDo) FirstOrInit() (*model.Series, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) FirstOrCreate() (*model.Series, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Series), nil
	}
}

func (s seriesDo) FindByPage(offset int, limit int) (result []*model.Series, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seriesDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seriesDo) Delete(models ...*model.Series) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seriesDo) withDO(do gen.Dao) *seriesDo {
	s.DO = *do.(*gen.DO)
	return s
}
