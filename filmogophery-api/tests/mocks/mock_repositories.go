// Code generated by MockGen. DO NOT EDIT.
// Source: filmogophery/internal/app/repositories (interfaces: ITmdbRepository)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=tests/mocks/mock_repositories.go filmogophery/internal/app/repositories ITmdbRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	types "filmogophery/internal/app/types"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITmdbRepository is a mock of ITmdbRepository interface.
type MockITmdbRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITmdbRepositoryMockRecorder
}

// MockITmdbRepositoryMockRecorder is the mock recorder for MockITmdbRepository.
type MockITmdbRepositoryMockRecorder struct {
	mock *MockITmdbRepository
}

// NewMockITmdbRepository creates a new mock instance.
func NewMockITmdbRepository(ctrl *gomock.Controller) *MockITmdbRepository {
	mock := &MockITmdbRepository{ctrl: ctrl}
	mock.recorder = &MockITmdbRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITmdbRepository) EXPECT() *MockITmdbRepositoryMockRecorder {
	return m.recorder
}

// GetMovieDetail mocks base method.
func (m *MockITmdbRepository) GetMovieDetail(arg0 int32) (*types.TmdbMovieDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieDetail", arg0)
	ret0, _ := ret[0].(*types.TmdbMovieDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieDetail indicates an expected call of GetMovieDetail.
func (mr *MockITmdbRepositoryMockRecorder) GetMovieDetail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieDetail", reflect.TypeOf((*MockITmdbRepository)(nil).GetMovieDetail), arg0)
}
