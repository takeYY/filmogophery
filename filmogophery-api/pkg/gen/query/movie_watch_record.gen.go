// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"filmogophery/pkg/gen/model"
)

func newMovieWatchRecord(db *gorm.DB, opts ...gen.DOOption) movieWatchRecord {
	_movieWatchRecord := movieWatchRecord{}

	_movieWatchRecord.movieWatchRecordDo.UseDB(db, opts...)
	_movieWatchRecord.movieWatchRecordDo.UseModel(&model.MovieWatchRecord{})

	tableName := _movieWatchRecord.movieWatchRecordDo.TableName()
	_movieWatchRecord.ALL = field.NewAsterisk(tableName)
	_movieWatchRecord.ID = field.NewInt32(tableName, "id")
	_movieWatchRecord.MovieImpressionID = field.NewInt32(tableName, "movie_impression_id")
	_movieWatchRecord.WatchMediaID = field.NewInt32(tableName, "watch_media_id")
	_movieWatchRecord.WatchDate = field.NewTime(tableName, "watch_date")
	_movieWatchRecord.WatchMedia = movieWatchRecordHasOneWatchMedia{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("WatchMedia", "model.WatchMedia"),
	}

	_movieWatchRecord.fillFieldMap()

	return _movieWatchRecord
}

type movieWatchRecord struct {
	movieWatchRecordDo

	ALL               field.Asterisk
	ID                field.Int32
	MovieImpressionID field.Int32
	WatchMediaID      field.Int32
	WatchDate         field.Time
	WatchMedia        movieWatchRecordHasOneWatchMedia

	fieldMap map[string]field.Expr
}

func (m movieWatchRecord) Table(newTableName string) *movieWatchRecord {
	m.movieWatchRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m movieWatchRecord) As(alias string) *movieWatchRecord {
	m.movieWatchRecordDo.DO = *(m.movieWatchRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *movieWatchRecord) updateTableName(table string) *movieWatchRecord {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.MovieImpressionID = field.NewInt32(table, "movie_impression_id")
	m.WatchMediaID = field.NewInt32(table, "watch_media_id")
	m.WatchDate = field.NewTime(table, "watch_date")

	m.fillFieldMap()

	return m
}

func (m *movieWatchRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *movieWatchRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["movie_impression_id"] = m.MovieImpressionID
	m.fieldMap["watch_media_id"] = m.WatchMediaID
	m.fieldMap["watch_date"] = m.WatchDate

}

func (m movieWatchRecord) clone(db *gorm.DB) movieWatchRecord {
	m.movieWatchRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m movieWatchRecord) replaceDB(db *gorm.DB) movieWatchRecord {
	m.movieWatchRecordDo.ReplaceDB(db)
	return m
}

type movieWatchRecordHasOneWatchMedia struct {
	db *gorm.DB

	field.RelationField
}

func (a movieWatchRecordHasOneWatchMedia) Where(conds ...field.Expr) *movieWatchRecordHasOneWatchMedia {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a movieWatchRecordHasOneWatchMedia) WithContext(ctx context.Context) *movieWatchRecordHasOneWatchMedia {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a movieWatchRecordHasOneWatchMedia) Session(session *gorm.Session) *movieWatchRecordHasOneWatchMedia {
	a.db = a.db.Session(session)
	return &a
}

func (a movieWatchRecordHasOneWatchMedia) Model(m *model.MovieWatchRecord) *movieWatchRecordHasOneWatchMediaTx {
	return &movieWatchRecordHasOneWatchMediaTx{a.db.Model(m).Association(a.Name())}
}

type movieWatchRecordHasOneWatchMediaTx struct{ tx *gorm.Association }

func (a movieWatchRecordHasOneWatchMediaTx) Find() (result *model.WatchMedia, err error) {
	return result, a.tx.Find(&result)
}

func (a movieWatchRecordHasOneWatchMediaTx) Append(values ...*model.WatchMedia) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a movieWatchRecordHasOneWatchMediaTx) Replace(values ...*model.WatchMedia) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a movieWatchRecordHasOneWatchMediaTx) Delete(values ...*model.WatchMedia) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a movieWatchRecordHasOneWatchMediaTx) Clear() error {
	return a.tx.Clear()
}

func (a movieWatchRecordHasOneWatchMediaTx) Count() int64 {
	return a.tx.Count()
}

type movieWatchRecordDo struct{ gen.DO }

func (m movieWatchRecordDo) Debug() *movieWatchRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m movieWatchRecordDo) WithContext(ctx context.Context) *movieWatchRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m movieWatchRecordDo) ReadDB() *movieWatchRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m movieWatchRecordDo) WriteDB() *movieWatchRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m movieWatchRecordDo) Session(config *gorm.Session) *movieWatchRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m movieWatchRecordDo) Clauses(conds ...clause.Expression) *movieWatchRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m movieWatchRecordDo) Returning(value interface{}, columns ...string) *movieWatchRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m movieWatchRecordDo) Not(conds ...gen.Condition) *movieWatchRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m movieWatchRecordDo) Or(conds ...gen.Condition) *movieWatchRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m movieWatchRecordDo) Select(conds ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m movieWatchRecordDo) Where(conds ...gen.Condition) *movieWatchRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m movieWatchRecordDo) Order(conds ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m movieWatchRecordDo) Distinct(cols ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m movieWatchRecordDo) Omit(cols ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m movieWatchRecordDo) Join(table schema.Tabler, on ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m movieWatchRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m movieWatchRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m movieWatchRecordDo) Group(cols ...field.Expr) *movieWatchRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m movieWatchRecordDo) Having(conds ...gen.Condition) *movieWatchRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m movieWatchRecordDo) Limit(limit int) *movieWatchRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m movieWatchRecordDo) Offset(offset int) *movieWatchRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m movieWatchRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *movieWatchRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m movieWatchRecordDo) Unscoped() *movieWatchRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m movieWatchRecordDo) Create(values ...*model.MovieWatchRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m movieWatchRecordDo) CreateInBatches(values []*model.MovieWatchRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m movieWatchRecordDo) Save(values ...*model.MovieWatchRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m movieWatchRecordDo) First() (*model.MovieWatchRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieWatchRecord), nil
	}
}

func (m movieWatchRecordDo) Take() (*model.MovieWatchRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieWatchRecord), nil
	}
}

func (m movieWatchRecordDo) Last() (*model.MovieWatchRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieWatchRecord), nil
	}
}

func (m movieWatchRecordDo) Find() ([]*model.MovieWatchRecord, error) {
	result, err := m.DO.Find()
	return result.([]*model.MovieWatchRecord), err
}

func (m movieWatchRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MovieWatchRecord, err error) {
	buf := make([]*model.MovieWatchRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m movieWatchRecordDo) FindInBatches(result *[]*model.MovieWatchRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m movieWatchRecordDo) Attrs(attrs ...field.AssignExpr) *movieWatchRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m movieWatchRecordDo) Assign(attrs ...field.AssignExpr) *movieWatchRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m movieWatchRecordDo) Joins(fields ...field.RelationField) *movieWatchRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m movieWatchRecordDo) Preload(fields ...field.RelationField) *movieWatchRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m movieWatchRecordDo) FirstOrInit() (*model.MovieWatchRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieWatchRecord), nil
	}
}

func (m movieWatchRecordDo) FirstOrCreate() (*model.MovieWatchRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MovieWatchRecord), nil
	}
}

func (m movieWatchRecordDo) FindByPage(offset int, limit int) (result []*model.MovieWatchRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m movieWatchRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m movieWatchRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m movieWatchRecordDo) Delete(models ...*model.MovieWatchRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *movieWatchRecordDo) withDO(do gen.Dao) *movieWatchRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
