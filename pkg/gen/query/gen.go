// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Genre:            newGenre(db, opts...),
		Movie:            newMovie(db, opts...),
		MovieGenres:      newMovieGenres(db, opts...),
		MovieImpression:  newMovieImpression(db, opts...),
		MovieSeries:      newMovieSeries(db, opts...),
		MovieWatchRecord: newMovieWatchRecord(db, opts...),
		Poster:           newPoster(db, opts...),
		User:             newUser(db, opts...),
		WatchMedia:       newWatchMedia(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Genre            genre
	Movie            movie
	MovieGenres      movieGenres
	MovieImpression  movieImpression
	MovieSeries      movieSeries
	MovieWatchRecord movieWatchRecord
	Poster           poster
	User             user
	WatchMedia       watchMedia
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Genre:            q.Genre.clone(db),
		Movie:            q.Movie.clone(db),
		MovieGenres:      q.MovieGenres.clone(db),
		MovieImpression:  q.MovieImpression.clone(db),
		MovieSeries:      q.MovieSeries.clone(db),
		MovieWatchRecord: q.MovieWatchRecord.clone(db),
		Poster:           q.Poster.clone(db),
		User:             q.User.clone(db),
		WatchMedia:       q.WatchMedia.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Genre:            q.Genre.replaceDB(db),
		Movie:            q.Movie.replaceDB(db),
		MovieGenres:      q.MovieGenres.replaceDB(db),
		MovieImpression:  q.MovieImpression.replaceDB(db),
		MovieSeries:      q.MovieSeries.replaceDB(db),
		MovieWatchRecord: q.MovieWatchRecord.replaceDB(db),
		Poster:           q.Poster.replaceDB(db),
		User:             q.User.replaceDB(db),
		WatchMedia:       q.WatchMedia.replaceDB(db),
	}
}

type queryCtx struct {
	Genre            *genreDo
	Movie            *movieDo
	MovieGenres      *movieGenresDo
	MovieImpression  *movieImpressionDo
	MovieSeries      *movieSeriesDo
	MovieWatchRecord *movieWatchRecordDo
	Poster           *posterDo
	User             *userDo
	WatchMedia       *watchMediaDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Genre:            q.Genre.WithContext(ctx),
		Movie:            q.Movie.WithContext(ctx),
		MovieGenres:      q.MovieGenres.WithContext(ctx),
		MovieImpression:  q.MovieImpression.WithContext(ctx),
		MovieSeries:      q.MovieSeries.WithContext(ctx),
		MovieWatchRecord: q.MovieWatchRecord.WithContext(ctx),
		Poster:           q.Poster.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		WatchMedia:       q.WatchMedia.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
